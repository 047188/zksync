#!/bin/bash
. .setup_env

REGIONS=`cat etc/kube/regions.json | jq 'map( . ) | .[]' | tr -d '"'`
CLUSTERS=`do-curl -X GET "https://api.digitalocean.com/v2/kubernetes/clusters"`

for R in $REGIONS; do
    NAME=$CLUSTER_NAME-$R
    CLUSTER=`echo $CLUSTERS | jq '.kubernetes_clusters | map(select(.name == "'$NAME'" and .region == "'$R'")) | .[0]'`
    CLUSTER_ID=`echo $CLUSTER | jq '.id' | tr -d '"' | grep -v null`
    CURRENT_COUNT=`echo $CLUSTER | jq '.node_pools[0] | .count' | grep -v null`
    if [ ! -z $CLUSTER_ID ]
    then
        echo "Cluster $NAME, id = $CLUSTER_ID, current_count = $CURRENT_COUNT"
        
        DATA='{"name": "'$NAME'", "node_pools": [ { "size": "c-32", "name": "prover", "count": '$COUNT_PER_REGION'} ] }'
        echo $DATA
        CLUSTER=`do-curl -X PUT "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID" --data "$DATA"`
        echo $CLUSTER

        KUBECONFIG=etc/kube/kubeconfig-$NAME.yaml
        do-curl -X GET "https://api.digitalocean.com/v2/kubernetes/clusters/$CLUSTER_ID/kubeconfig" > $KUBECONFIG

        . bin/.kube_gen_secret | kubectl apply -f - || exit 1
        kubectl apply -f etc/kube/prover.yaml || exit 1
        kubectl scale deployments/prover --replicas=$COUNT_PER_REGION || exit 1
    fi
done

