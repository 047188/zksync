/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ZkSyncProcessOpUnitTestInterface extends ethers.utils.Interface {
  functions: {
    "authFacts(address,uint32)": FunctionFragment;
    "balancesToWithdraw(bytes22)": FunctionFragment;
    "blocks_DEPRECATED(uint32)": FunctionFragment;
    "cancelOutstandingDepositsForExodusMode(uint64)": FunctionFragment;
    "collectOnchainOpsExternal(tuple,bytes32,uint64,bytes)": FunctionFragment;
    "commitBlocks(tuple,tuple[])": FunctionFragment;
    "commitPriorityRequests()": FunctionFragment;
    "depositERC20(address,uint104,address)": FunctionFragment;
    "depositETH(address)": FunctionFragment;
    "executeBlocks(tuple[])": FunctionFragment;
    "exit(tuple,uint32,uint16,uint128,uint256[])": FunctionFragment;
    "exited(uint32,uint16)": FunctionFragment;
    "exodusMode()": FunctionFragment;
    "firstPendingWithdrawalIndex_DEPRECATED()": FunctionFragment;
    "firstPriorityRequestId()": FunctionFragment;
    "fullExit(uint32,address)": FunctionFragment;
    "getBalanceToWithdraw(address,uint16)": FunctionFragment;
    "getNoticePeriod()": FunctionFragment;
    "governance()": FunctionFragment;
    "initialize(bytes)": FunctionFragment;
    "isReadyForUpgrade()": FunctionFragment;
    "numberOfPendingWithdrawals_DEPRECATED()": FunctionFragment;
    "pendingWithdrawals_DEPRECATED(uint32)": FunctionFragment;
    "priorityRequests(uint64)": FunctionFragment;
    "revertBlocks(tuple[])": FunctionFragment;
    "setAuthPubkeyHash(bytes,uint32)": FunctionFragment;
    "storedBlockHashes(uint32)": FunctionFragment;
    "totalBlocksCommitted()": FunctionFragment;
    "totalBlocksVerified()": FunctionFragment;
    "totalCommittedPriorityRequests()": FunctionFragment;
    "totalOpenPriorityRequests()": FunctionFragment;
    "triggerExodusIfNeeded()": FunctionFragment;
    "upgrade(bytes)": FunctionFragment;
    "upgradeCanceled()": FunctionFragment;
    "upgradeFinishes()": FunctionFragment;
    "upgradeNoticePeriodStarted()": FunctionFragment;
    "upgradePreparationActivationTime()": FunctionFragment;
    "upgradePreparationActive()": FunctionFragment;
    "upgradePreparationStarted()": FunctionFragment;
    "verifiedCommitmentHashes(bytes32)": FunctionFragment;
    "verifier()": FunctionFragment;
    "verifyCommitments(uint256[],uint256[],uint8[],uint256[],uint256[16])": FunctionFragment;
    "withdrawERC20(address,uint128)": FunctionFragment;
    "withdrawERC20Guarded(address,address,uint128,uint128)": FunctionFragment;
    "withdrawETH(uint128)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "authFacts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesToWithdraw",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blocks_DEPRECATED",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOutstandingDepositsForExodusMode",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectOnchainOpsExternal",
    values: [
      {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      BytesLike,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "commitPriorityRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "depositETH", values: [string]): string;
  encodeFunctionData(
    functionFragment: "executeBlocks",
    values: [
      {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exit",
    values: [
      {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exited",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exodusMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPendingWithdrawalIndex_DEPRECATED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "firstPriorityRequestId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fullExit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceToWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNoticePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyForUpgrade",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfPendingWithdrawals_DEPRECATED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals_DEPRECATED",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "priorityRequests",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revertBlocks",
    values: [
      {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthPubkeyHash",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storedBlockHashes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksCommitted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBlocksVerified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCommittedPriorityRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalOpenPriorityRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggerExodusIfNeeded",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgrade", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "upgradeCanceled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeFinishes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeNoticePeriodStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePreparationActivationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePreparationActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "upgradePreparationStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedCommitmentHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyCommitments",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      BigNumberish[],
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20Guarded",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "authFacts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balancesToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blocks_DEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOutstandingDepositsForExodusMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectOnchainOpsExternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitPriorityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exited", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exodusMode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "firstPendingWithdrawalIndex_DEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "firstPriorityRequestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fullExit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNoticePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReadyForUpgrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfPendingWithdrawals_DEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals_DEPRECATED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priorityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthPubkeyHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storedBlockHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksCommitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBlocksVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCommittedPriorityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOpenPriorityRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerExodusIfNeeded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeCanceled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeFinishes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeNoticePeriodStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePreparationActivationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePreparationActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradePreparationStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedCommitmentHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyCommitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20Guarded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "BlockCommit(uint32)": EventFragment;
    "BlockVerification(uint32)": EventFragment;
    "BlocksRevert(uint32,uint32)": EventFragment;
    "DepositCommit(uint32,uint32,address,uint16,uint128)": EventFragment;
    "ExodusMode()": EventFragment;
    "FactAuth(address,uint32,bytes)": EventFragment;
    "FullExitCommit(uint32,uint32,address,uint16,uint128)": EventFragment;
    "NewPriorityRequest(address,uint64,uint8,bytes,uint256)": EventFragment;
    "OnchainDeposit(address,uint16,uint128,address)": EventFragment;
    "OnchainWithdrawal(address,uint16,uint128)": EventFragment;
    "PendingWithdrawalsAdd(uint32,uint32)": EventFragment;
    "PendingWithdrawalsComplete(uint32,uint32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockVerification"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlocksRevert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExodusMode"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactAuth"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FullExitCommit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriorityRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnchainDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnchainWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingWithdrawalsAdd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendingWithdrawalsComplete"): EventFragment;
}

export class ZkSyncProcessOpUnitTest extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ZkSyncProcessOpUnitTestInterface;

  functions: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    balancesToWithdraw(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      balanceToWithdraw: BigNumber;
      gasReserveValue: number;
      0: BigNumber;
      1: number;
    }>;

    "balancesToWithdraw(bytes22)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      balanceToWithdraw: BigNumber;
      gasReserveValue: number;
      0: BigNumber;
      1: number;
    }>;

    blocks_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      committedAtBlock: number;
      priorityOperations: BigNumber;
      chunks: number;
      withdrawalsDataHash: string;
      commitment: string;
      stateRoot: string;
      0: number;
      1: BigNumber;
      2: number;
      3: string;
      4: string;
      5: string;
    }>;

    "blocks_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      committedAtBlock: number;
      priorityOperations: BigNumber;
      chunks: number;
      withdrawalsDataHash: string;
      commitment: string;
      stateRoot: string;
      0: number;
      1: BigNumber;
      2: number;
      3: string;
      4: string;
      5: string;
    }>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelOutstandingDepositsForExodusMode(uint64)"(
      _n: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    collectOnchainOpsExternal(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "collectOnchainOpsExternal(tuple,bytes32,uint64,bytes)"(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "commitBlocks(tuple,tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    commitPriorityRequests(overrides?: Overrides): Promise<ContractTransaction>;

    "commitPriorityRequests()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositERC20(address,uint104,address)"(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositETH(
      _zkSyncAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "depositETH(address)"(
      _zkSyncAddress: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exit(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "exit(tuple,uint32,uint16,uint128,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    exited(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "exited(uint32,uint16)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    exodusMode(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "exodusMode()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    firstPendingWithdrawalIndex_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "firstPendingWithdrawalIndex_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    firstPriorityRequestId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "firstPriorityRequestId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    fullExit(
      _accountId: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "fullExit(uint32,address)"(
      _accountId: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getBalanceToWithdraw(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBalanceToWithdraw(address,uint16)"(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getNoticePeriod(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getNoticePeriod()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    governance(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "governance()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      initializationParameters: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(bytes)"(
      initializationParameters: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isReadyForUpgrade(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isReadyForUpgrade()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    numberOfPendingWithdrawals_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "numberOfPendingWithdrawals_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    pendingWithdrawals_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      tokenId: number;
      0: string;
      1: number;
    }>;

    "pendingWithdrawals_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      tokenId: number;
      0: string;
      1: number;
    }>;

    priorityRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      opType: number;
      pubData: string;
      expirationBlock: BigNumber;
      0: number;
      1: string;
      2: BigNumber;
    }>;

    "priorityRequests(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      opType: number;
      pubData: string;
      expirationBlock: BigNumber;
      0: number;
      1: string;
      2: BigNumber;
    }>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setAuthPubkeyHash(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "totalBlocksCommitted()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    totalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "totalBlocksVerified()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    totalCommittedPriorityRequests(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalCommittedPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    totalOpenPriorityRequests(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalOpenPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    triggerExodusIfNeeded(overrides?: Overrides): Promise<ContractTransaction>;

    "triggerExodusIfNeeded()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradeCanceled(overrides?: Overrides): Promise<ContractTransaction>;

    "upgradeCanceled()"(overrides?: Overrides): Promise<ContractTransaction>;

    upgradeFinishes(overrides?: Overrides): Promise<ContractTransaction>;

    "upgradeFinishes()"(overrides?: Overrides): Promise<ContractTransaction>;

    upgradeNoticePeriodStarted(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradeNoticePeriodStarted()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    upgradePreparationActivationTime(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "upgradePreparationActivationTime()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    upgradePreparationActive(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "upgradePreparationActive()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    upgradePreparationStarted(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "upgradePreparationStarted()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    verifiedCommitmentHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "verifiedCommitmentHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    verifier(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "verifier()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    verifyCommitments(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "verifyCommitments(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawERC20(address,uint128)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawERC20Guarded(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawERC20Guarded(address,address,uint128,uint128)"(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawETH(uint128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  authFacts(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "authFacts(address,uint32)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  balancesToWithdraw(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    balanceToWithdraw: BigNumber;
    gasReserveValue: number;
    0: BigNumber;
    1: number;
  }>;

  "balancesToWithdraw(bytes22)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    balanceToWithdraw: BigNumber;
    gasReserveValue: number;
    0: BigNumber;
    1: number;
  }>;

  blocks_DEPRECATED(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    committedAtBlock: number;
    priorityOperations: BigNumber;
    chunks: number;
    withdrawalsDataHash: string;
    commitment: string;
    stateRoot: string;
    0: number;
    1: BigNumber;
    2: number;
    3: string;
    4: string;
    5: string;
  }>;

  "blocks_DEPRECATED(uint32)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    committedAtBlock: number;
    priorityOperations: BigNumber;
    chunks: number;
    withdrawalsDataHash: string;
    commitment: string;
    stateRoot: string;
    0: number;
    1: BigNumber;
    2: number;
    3: string;
    4: string;
    5: string;
  }>;

  cancelOutstandingDepositsForExodusMode(
    _n: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelOutstandingDepositsForExodusMode(uint64)"(
    _n: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  collectOnchainOpsExternal(
    _newBlockData: {
      blockNumber: BigNumberish;
      feeAccount: BigNumberish;
      newStateHash: BytesLike;
      publicData: BytesLike;
      timestamp: BigNumberish;
      onchainOperations: {
        publicDataOffset: BigNumberish;
        ethWitness: BytesLike;
      }[];
    },
    processableOperationsHash: BytesLike,
    priorityOperationsProcessed: BigNumberish,
    offsetsCommitment: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "collectOnchainOpsExternal(tuple,bytes32,uint64,bytes)"(
    _newBlockData: {
      blockNumber: BigNumberish;
      feeAccount: BigNumberish;
      newStateHash: BytesLike;
      publicData: BytesLike;
      timestamp: BigNumberish;
      onchainOperations: {
        publicDataOffset: BigNumberish;
        ethWitness: BytesLike;
      }[];
    },
    processableOperationsHash: BytesLike,
    priorityOperationsProcessed: BigNumberish,
    offsetsCommitment: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitBlocks(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    },
    _newBlocksData: {
      blockNumber: BigNumberish;
      feeAccount: BigNumberish;
      newStateHash: BytesLike;
      publicData: BytesLike;
      timestamp: BigNumberish;
      onchainOperations: {
        publicDataOffset: BigNumberish;
        ethWitness: BytesLike;
      }[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "commitBlocks(tuple,tuple[])"(
    _lastCommittedBlockData: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    },
    _newBlocksData: {
      blockNumber: BigNumberish;
      feeAccount: BigNumberish;
      newStateHash: BytesLike;
      publicData: BytesLike;
      timestamp: BigNumberish;
      onchainOperations: {
        publicDataOffset: BigNumberish;
        ethWitness: BytesLike;
      }[];
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  commitPriorityRequests(overrides?: Overrides): Promise<ContractTransaction>;

  "commitPriorityRequests()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositERC20(
    _token: string,
    _amount: BigNumberish,
    _zkSyncAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositERC20(address,uint104,address)"(
    _token: string,
    _amount: BigNumberish,
    _zkSyncAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositETH(
    _zkSyncAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "depositETH(address)"(
    _zkSyncAddress: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  executeBlocks(
    _blocksData: {
      storedBlock: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      };
      pendingOnchainOpsPubdata: BytesLike[];
      commitmentsInSlot: BytesLike[];
      commitmentIdx: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeBlocks(tuple[])"(
    _blocksData: {
      storedBlock: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      };
      pendingOnchainOpsPubdata: BytesLike[];
      commitmentsInSlot: BytesLike[];
      commitmentIdx: BigNumberish;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exit(
    _storedBlockInfo: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    },
    _accountId: BigNumberish,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _proof: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "exit(tuple,uint32,uint16,uint128,uint256[])"(
    _storedBlockInfo: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    },
    _accountId: BigNumberish,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _proof: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  exited(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "exited(uint32,uint16)"(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exodusMode(overrides?: CallOverrides): Promise<boolean>;

  "exodusMode()"(overrides?: CallOverrides): Promise<boolean>;

  firstPendingWithdrawalIndex_DEPRECATED(
    overrides?: CallOverrides
  ): Promise<number>;

  "firstPendingWithdrawalIndex_DEPRECATED()"(
    overrides?: CallOverrides
  ): Promise<number>;

  firstPriorityRequestId(overrides?: CallOverrides): Promise<BigNumber>;

  "firstPriorityRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

  fullExit(
    _accountId: BigNumberish,
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "fullExit(uint32,address)"(
    _accountId: BigNumberish,
    _token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getBalanceToWithdraw(
    _address: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getBalanceToWithdraw(address,uint16)"(
    _address: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNoticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

  "getNoticePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

  governance(overrides?: CallOverrides): Promise<string>;

  "governance()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    initializationParameters: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(bytes)"(
    initializationParameters: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isReadyForUpgrade(overrides?: CallOverrides): Promise<boolean>;

  "isReadyForUpgrade()"(overrides?: CallOverrides): Promise<boolean>;

  numberOfPendingWithdrawals_DEPRECATED(
    overrides?: CallOverrides
  ): Promise<number>;

  "numberOfPendingWithdrawals_DEPRECATED()"(
    overrides?: CallOverrides
  ): Promise<number>;

  pendingWithdrawals_DEPRECATED(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    to: string;
    tokenId: number;
    0: string;
    1: number;
  }>;

  "pendingWithdrawals_DEPRECATED(uint32)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    to: string;
    tokenId: number;
    0: string;
    1: number;
  }>;

  priorityRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    opType: number;
    pubData: string;
    expirationBlock: BigNumber;
    0: number;
    1: string;
    2: BigNumber;
  }>;

  "priorityRequests(uint64)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    opType: number;
    pubData: string;
    expirationBlock: BigNumber;
    0: number;
    1: string;
    2: BigNumber;
  }>;

  revertBlocks(
    _blocksToRevert: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revertBlocks(tuple[])"(
    _blocksToRevert: {
      blockNumber: BigNumberish;
      priorityOperations: BigNumberish;
      pendingOnchainOperationsHash: BytesLike;
      timestamp: BigNumberish;
      stateHash: BytesLike;
      commitment: BytesLike;
    }[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setAuthPubkeyHash(
    _pubkey_hash: BytesLike,
    _nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAuthPubkeyHash(bytes,uint32)"(
    _pubkey_hash: BytesLike,
    _nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  storedBlockHashes(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "storedBlockHashes(uint32)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalBlocksCommitted(overrides?: CallOverrides): Promise<number>;

  "totalBlocksCommitted()"(overrides?: CallOverrides): Promise<number>;

  totalBlocksVerified(overrides?: CallOverrides): Promise<number>;

  "totalBlocksVerified()"(overrides?: CallOverrides): Promise<number>;

  totalCommittedPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

  "totalCommittedPriorityRequests()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalOpenPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

  "totalOpenPriorityRequests()"(overrides?: CallOverrides): Promise<BigNumber>;

  triggerExodusIfNeeded(overrides?: Overrides): Promise<ContractTransaction>;

  "triggerExodusIfNeeded()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgrade(
    upgradeParameters: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgrade(bytes)"(
    upgradeParameters: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradeCanceled(overrides?: Overrides): Promise<ContractTransaction>;

  "upgradeCanceled()"(overrides?: Overrides): Promise<ContractTransaction>;

  upgradeFinishes(overrides?: Overrides): Promise<ContractTransaction>;

  "upgradeFinishes()"(overrides?: Overrides): Promise<ContractTransaction>;

  upgradeNoticePeriodStarted(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradeNoticePeriodStarted()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  upgradePreparationActivationTime(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "upgradePreparationActivationTime()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  upgradePreparationActive(overrides?: CallOverrides): Promise<boolean>;

  "upgradePreparationActive()"(overrides?: CallOverrides): Promise<boolean>;

  upgradePreparationStarted(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "upgradePreparationStarted()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  verifiedCommitmentHashes(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "verifiedCommitmentHashes(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifier(overrides?: CallOverrides): Promise<string>;

  "verifier()"(overrides?: CallOverrides): Promise<string>;

  verifyCommitments(
    _recursiveInput: BigNumberish[],
    _proof: BigNumberish[],
    _vkIndexes: BigNumberish[],
    _commitments: BigNumberish[],
    _subproofsLibms: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "verifyCommitments(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
    _recursiveInput: BigNumberish[],
    _proof: BigNumberish[],
    _vkIndexes: BigNumberish[],
    _commitments: BigNumberish[],
    _subproofsLibms: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawERC20(address,uint128)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawERC20Guarded(
    _tokenAddress: string,
    _to: string,
    _amount: BigNumberish,
    _maxAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawERC20Guarded(address,address,uint128,uint128)"(
    _tokenAddress: string,
    _to: string,
    _amount: BigNumberish,
    _maxAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawETH(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawETH(uint128)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    balancesToWithdraw(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      balanceToWithdraw: BigNumber;
      gasReserveValue: number;
      0: BigNumber;
      1: number;
    }>;

    "balancesToWithdraw(bytes22)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      balanceToWithdraw: BigNumber;
      gasReserveValue: number;
      0: BigNumber;
      1: number;
    }>;

    blocks_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      committedAtBlock: number;
      priorityOperations: BigNumber;
      chunks: number;
      withdrawalsDataHash: string;
      commitment: string;
      stateRoot: string;
      0: number;
      1: BigNumber;
      2: number;
      3: string;
      4: string;
      5: string;
    }>;

    "blocks_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      committedAtBlock: number;
      priorityOperations: BigNumber;
      chunks: number;
      withdrawalsDataHash: string;
      commitment: string;
      stateRoot: string;
      0: number;
      1: BigNumber;
      2: number;
      3: string;
      4: string;
      5: string;
    }>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOutstandingDepositsForExodusMode(uint64)"(
      _n: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectOnchainOpsExternal(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "collectOnchainOpsExternal(tuple,bytes32,uint64,bytes)"(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "commitBlocks(tuple,tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    commitPriorityRequests(overrides?: CallOverrides): Promise<void>;

    "commitPriorityRequests()"(overrides?: CallOverrides): Promise<void>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositERC20(address,uint104,address)"(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      _zkSyncAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositETH(address)"(
      _zkSyncAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    exit(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "exit(tuple,uint32,uint16,uint128,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    exited(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "exited(uint32,uint16)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exodusMode(overrides?: CallOverrides): Promise<boolean>;

    "exodusMode()"(overrides?: CallOverrides): Promise<boolean>;

    firstPendingWithdrawalIndex_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<number>;

    "firstPendingWithdrawalIndex_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<number>;

    firstPriorityRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPriorityRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    fullExit(
      _accountId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "fullExit(uint32,address)"(
      _accountId: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalanceToWithdraw(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalanceToWithdraw(address,uint16)"(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNoticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getNoticePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<string>;

    "governance()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      initializationParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(bytes)"(
      initializationParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    isReadyForUpgrade(overrides?: CallOverrides): Promise<boolean>;

    "isReadyForUpgrade()"(overrides?: CallOverrides): Promise<boolean>;

    numberOfPendingWithdrawals_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<number>;

    "numberOfPendingWithdrawals_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<number>;

    pendingWithdrawals_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      tokenId: number;
      0: string;
      1: number;
    }>;

    "pendingWithdrawals_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      to: string;
      tokenId: number;
      0: string;
      1: number;
    }>;

    priorityRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      opType: number;
      pubData: string;
      expirationBlock: BigNumber;
      0: number;
      1: string;
      2: BigNumber;
    }>;

    "priorityRequests(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      opType: number;
      pubData: string;
      expirationBlock: BigNumber;
      0: number;
      1: string;
      2: BigNumber;
    }>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthPubkeyHash(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalBlocksCommitted(overrides?: CallOverrides): Promise<number>;

    "totalBlocksCommitted()"(overrides?: CallOverrides): Promise<number>;

    totalBlocksVerified(overrides?: CallOverrides): Promise<number>;

    "totalBlocksVerified()"(overrides?: CallOverrides): Promise<number>;

    totalCommittedPriorityRequests(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalCommittedPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOpenPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "totalOpenPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerExodusIfNeeded(overrides?: CallOverrides): Promise<boolean>;

    "triggerExodusIfNeeded()"(overrides?: CallOverrides): Promise<boolean>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeCanceled(overrides?: CallOverrides): Promise<void>;

    "upgradeCanceled()"(overrides?: CallOverrides): Promise<void>;

    upgradeFinishes(overrides?: CallOverrides): Promise<void>;

    "upgradeFinishes()"(overrides?: CallOverrides): Promise<void>;

    upgradeNoticePeriodStarted(overrides?: CallOverrides): Promise<void>;

    "upgradeNoticePeriodStarted()"(overrides?: CallOverrides): Promise<void>;

    upgradePreparationActivationTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upgradePreparationActivationTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradePreparationActive(overrides?: CallOverrides): Promise<boolean>;

    "upgradePreparationActive()"(overrides?: CallOverrides): Promise<boolean>;

    upgradePreparationStarted(overrides?: CallOverrides): Promise<void>;

    "upgradePreparationStarted()"(overrides?: CallOverrides): Promise<void>;

    verifiedCommitmentHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "verifiedCommitmentHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifier(overrides?: CallOverrides): Promise<string>;

    "verifier()"(overrides?: CallOverrides): Promise<string>;

    verifyCommitments(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "verifyCommitments(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawERC20(address,uint128)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20Guarded(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdrawERC20Guarded(address,address,uint128,uint128)"(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawETH(uint128)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BlockCommit(blockNumber: BigNumberish | null): EventFilter;

    BlockVerification(blockNumber: BigNumberish | null): EventFilter;

    BlocksRevert(
      totalBlocksVerified: null,
      totalBlocksCommitted: null
    ): EventFilter;

    DepositCommit(
      zkSyncBlockId: BigNumberish | null,
      accountId: BigNumberish | null,
      owner: null,
      tokenId: BigNumberish | null,
      amount: null
    ): EventFilter;

    ExodusMode(): EventFilter;

    FactAuth(sender: string | null, nonce: null, fact: null): EventFilter;

    FullExitCommit(
      zkSyncBlockId: BigNumberish | null,
      accountId: BigNumberish | null,
      owner: null,
      tokenId: BigNumberish | null,
      amount: null
    ): EventFilter;

    NewPriorityRequest(
      sender: null,
      serialId: null,
      opType: null,
      pubData: null,
      expirationBlock: null
    ): EventFilter;

    OnchainDeposit(
      sender: string | null,
      tokenId: BigNumberish | null,
      amount: null,
      owner: string | null
    ): EventFilter;

    OnchainWithdrawal(
      owner: string | null,
      tokenId: BigNumberish | null,
      amount: null
    ): EventFilter;

    PendingWithdrawalsAdd(
      queueStartIndex: null,
      queueEndIndex: null
    ): EventFilter;

    PendingWithdrawalsComplete(
      queueStartIndex: null,
      queueEndIndex: null
    ): EventFilter;
  };

  estimateGas: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balancesToWithdraw(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balancesToWithdraw(bytes22)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blocks_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blocks_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelOutstandingDepositsForExodusMode(uint64)"(
      _n: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    collectOnchainOpsExternal(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "collectOnchainOpsExternal(tuple,bytes32,uint64,bytes)"(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "commitBlocks(tuple,tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    commitPriorityRequests(overrides?: Overrides): Promise<BigNumber>;

    "commitPriorityRequests()"(overrides?: Overrides): Promise<BigNumber>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositERC20(address,uint104,address)"(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositETH(
      _zkSyncAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "depositETH(address)"(
      _zkSyncAddress: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    exit(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "exit(tuple,uint32,uint16,uint128,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    exited(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exited(uint32,uint16)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exodusMode(overrides?: CallOverrides): Promise<BigNumber>;

    "exodusMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    firstPendingWithdrawalIndex_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "firstPendingWithdrawalIndex_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    firstPriorityRequestId(overrides?: CallOverrides): Promise<BigNumber>;

    "firstPriorityRequestId()"(overrides?: CallOverrides): Promise<BigNumber>;

    fullExit(
      _accountId: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "fullExit(uint32,address)"(
      _accountId: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getBalanceToWithdraw(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalanceToWithdraw(address,uint16)"(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNoticePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    "getNoticePeriod()"(overrides?: CallOverrides): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    "governance()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      initializationParameters: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(bytes)"(
      initializationParameters: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isReadyForUpgrade(overrides?: CallOverrides): Promise<BigNumber>;

    "isReadyForUpgrade()"(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfPendingWithdrawals_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "numberOfPendingWithdrawals_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingWithdrawals_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pendingWithdrawals_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priorityRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priorityRequests(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setAuthPubkeyHash(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalBlocksCommitted(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBlocksCommitted()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalBlocksVerified(overrides?: CallOverrides): Promise<BigNumber>;

    "totalBlocksVerified()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalCommittedPriorityRequests(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalCommittedPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOpenPriorityRequests(overrides?: CallOverrides): Promise<BigNumber>;

    "totalOpenPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerExodusIfNeeded(overrides?: Overrides): Promise<BigNumber>;

    "triggerExodusIfNeeded()"(overrides?: Overrides): Promise<BigNumber>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    upgradeCanceled(overrides?: Overrides): Promise<BigNumber>;

    "upgradeCanceled()"(overrides?: Overrides): Promise<BigNumber>;

    upgradeFinishes(overrides?: Overrides): Promise<BigNumber>;

    "upgradeFinishes()"(overrides?: Overrides): Promise<BigNumber>;

    upgradeNoticePeriodStarted(overrides?: Overrides): Promise<BigNumber>;

    "upgradeNoticePeriodStarted()"(overrides?: Overrides): Promise<BigNumber>;

    upgradePreparationActivationTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "upgradePreparationActivationTime()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradePreparationActive(overrides?: CallOverrides): Promise<BigNumber>;

    "upgradePreparationActive()"(overrides?: CallOverrides): Promise<BigNumber>;

    upgradePreparationStarted(overrides?: Overrides): Promise<BigNumber>;

    "upgradePreparationStarted()"(overrides?: Overrides): Promise<BigNumber>;

    verifiedCommitmentHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifiedCommitmentHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    "verifier()"(overrides?: CallOverrides): Promise<BigNumber>;

    verifyCommitments(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "verifyCommitments(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawERC20(address,uint128)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawERC20Guarded(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawERC20Guarded(address,address,uint128,uint128)"(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawETH(uint128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authFacts(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authFacts(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balancesToWithdraw(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balancesToWithdraw(bytes22)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blocks_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blocks_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOutstandingDepositsForExodusMode(
      _n: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelOutstandingDepositsForExodusMode(uint64)"(
      _n: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    collectOnchainOpsExternal(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "collectOnchainOpsExternal(tuple,bytes32,uint64,bytes)"(
      _newBlockData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      },
      processableOperationsHash: BytesLike,
      priorityOperationsProcessed: BigNumberish,
      offsetsCommitment: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitBlocks(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitBlocks(tuple,tuple[])"(
      _lastCommittedBlockData: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _newBlocksData: {
        blockNumber: BigNumberish;
        feeAccount: BigNumberish;
        newStateHash: BytesLike;
        publicData: BytesLike;
        timestamp: BigNumberish;
        onchainOperations: {
          publicDataOffset: BigNumberish;
          ethWitness: BytesLike;
        }[];
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    commitPriorityRequests(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "commitPriorityRequests()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositERC20(address,uint104,address)"(
      _token: string,
      _amount: BigNumberish,
      _zkSyncAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositETH(
      _zkSyncAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "depositETH(address)"(
      _zkSyncAddress: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    executeBlocks(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeBlocks(tuple[])"(
      _blocksData: {
        storedBlock: {
          blockNumber: BigNumberish;
          priorityOperations: BigNumberish;
          pendingOnchainOperationsHash: BytesLike;
          timestamp: BigNumberish;
          stateHash: BytesLike;
          commitment: BytesLike;
        };
        pendingOnchainOpsPubdata: BytesLike[];
        commitmentsInSlot: BytesLike[];
        commitmentIdx: BigNumberish;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exit(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "exit(tuple,uint32,uint16,uint128,uint256[])"(
      _storedBlockInfo: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      },
      _accountId: BigNumberish,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _proof: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    exited(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exited(uint32,uint16)"(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exodusMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "exodusMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    firstPendingWithdrawalIndex_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "firstPendingWithdrawalIndex_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    firstPriorityRequestId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "firstPriorityRequestId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fullExit(
      _accountId: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "fullExit(uint32,address)"(
      _accountId: BigNumberish,
      _token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getBalanceToWithdraw(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalanceToWithdraw(address,uint16)"(
      _address: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNoticePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getNoticePeriod()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      initializationParameters: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(bytes)"(
      initializationParameters: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isReadyForUpgrade(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isReadyForUpgrade()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfPendingWithdrawals_DEPRECATED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "numberOfPendingWithdrawals_DEPRECATED()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingWithdrawals_DEPRECATED(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendingWithdrawals_DEPRECATED(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priorityRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priorityRequests(uint64)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revertBlocks(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revertBlocks(tuple[])"(
      _blocksToRevert: {
        blockNumber: BigNumberish;
        priorityOperations: BigNumberish;
        pendingOnchainOperationsHash: BytesLike;
        timestamp: BigNumberish;
        stateHash: BytesLike;
        commitment: BytesLike;
      }[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setAuthPubkeyHash(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAuthPubkeyHash(bytes,uint32)"(
      _pubkey_hash: BytesLike,
      _nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    storedBlockHashes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "storedBlockHashes(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBlocksCommitted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBlocksCommitted()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBlocksVerified(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalBlocksVerified()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCommittedPriorityRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalCommittedPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalOpenPriorityRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalOpenPriorityRequests()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerExodusIfNeeded(overrides?: Overrides): Promise<PopulatedTransaction>;

    "triggerExodusIfNeeded()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgrade(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgrade(bytes)"(
      upgradeParameters: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradeCanceled(overrides?: Overrides): Promise<PopulatedTransaction>;

    "upgradeCanceled()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    upgradeFinishes(overrides?: Overrides): Promise<PopulatedTransaction>;

    "upgradeFinishes()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    upgradeNoticePeriodStarted(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradeNoticePeriodStarted()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    upgradePreparationActivationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upgradePreparationActivationTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradePreparationActive(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "upgradePreparationActive()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradePreparationStarted(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "upgradePreparationStarted()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    verifiedCommitmentHashes(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifiedCommitmentHashes(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "verifier()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyCommitments(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "verifyCommitments(uint256[],uint256[],uint8[],uint256[],uint256[16])"(
      _recursiveInput: BigNumberish[],
      _proof: BigNumberish[],
      _vkIndexes: BigNumberish[],
      _commitments: BigNumberish[],
      _subproofsLibms: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawERC20(address,uint128)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawERC20Guarded(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawERC20Guarded(address,address,uint128,uint128)"(
      _tokenAddress: string,
      _to: string,
      _amount: BigNumberish,
      _maxAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawETH(uint128)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
