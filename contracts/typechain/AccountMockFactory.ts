/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { AccountMock } from "./AccountMock";

export class AccountMockFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(_owner: string, overrides?: Overrides): Promise<AccountMock> {
    return super.deploy(_owner, overrides || {}) as Promise<AccountMock>;
  }
  getDeployTransaction(
    _owner: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  attach(address: string): AccountMock {
    return super.attach(address) as AccountMock;
  }
  connect(signer: Signer): AccountMockFactory {
    return super.connect(signer) as AccountMockFactory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AccountMock {
    return new Contract(address, _abi, signerOrProvider) as AccountMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103a53803806103a58339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610340806100656000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631626ba7e1461003b5780638da5cb5b14610105575b600080fd5b6100e86004803603604081101561005157600080fd5b8135919081019060408101602082013564010000000081111561007357600080fd5b82018360208201111561008557600080fd5b803590602001918460018302840111640100000000831117156100a757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610129945050505050565b604080516001600160e01b03199092168252519081900360200190f35b61010d6102ca565b604080516001600160a01b039092168252519081900360200190f35b60008151604114610181576040805162461bcd60e51b815260206004820152601d60248201527f5369676e6174757265206c656e67746820697320696e636f7272656374000000604482015290519081900360640190fd5b60208201516040830151604184015160ff169190601b8314806101a757508260ff16601c145b6101b057600080fd5b600060018785858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561020c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661026b576040805162461bcd60e51b8152602060048201526014602482015273065637265636f7665722072657475726e656420360641b604482015290519081900360640190fd5b6000546001600160a01b038281169116146102b75760405162461bcd60e51b81526004018080602001828103825260318152602001806102da6031913960400191505060405180910390fd5b50630b135d3f60e11b9695505050505050565b6000546001600160a01b03168156fe5265636f7665726564206164647265737320646f65736e277420636f72726573706f6e6420746f20746865206f776e6572a26469706673582212209880961cfc7241480086cf0138757b575e03a751541ea74c56d6fc60179ae61b64736f6c63430007030033";
